import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useNotification } from '../../contexts/NotificationContext';
import { useBOMData } from '../../contexts/BOMDataContext';
import UnifiedBOMGrid from '../grid/UnifiedBOMGrid';
import UnifiedNotificationManager from '../notification/UnifiedNotificationManager';
import RightSidebar from '../layout/RightSidebar';

const CompleteMBOMDashboard = () => {
  const { user, logout } = useAuth();
  const { showSuccess, showError, showInfo, showWarning } = useNotification();
  const {
    bomData,
    selectedItem,
    changeHistory,
    loading,
    setSelectedItem,
    setChangeHistory,
    saveBOMData,
    loadBOMData,
    updateBOMItem,
    addBOMItem,
    deleteBOMItem
  } = useBOMData();

  // States
  const [activeTab, setActiveTab] = useState('structure');
  const [showChanges, setShowChanges] = useState(false);
  const [showNotificationBanner, setShowNotificationBanner] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [expandedItems, setExpandedItems] = useState(new Set([1, 2, 7, 10, 13]));
  const [selectedTreeItem, setSelectedTreeItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [showAlarmDashboard, setShowAlarmDashboard] = useState(false);
  const [alarms, setAlarms] = useState([]);
  const [ebomChanges, setEbomChanges] = useState([]);

  // Ï¥àÍ∏∞Ìôî Ïãú ÏïåÎûå Î∞è eBOM Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò
  useEffect(() => {
    // ÏïåÎûå ÏÉùÏÑ±
    const initialAlarms = [
      { id: 1, type: 'warning', message: 'ENGINE-ASM-001 Î¶¨ÎìúÌÉÄÏûÑ Ï¥àÍ≥º (45Ïùº)', time: '10Î∂Ñ Ï†Ñ', active: true },
      { id: 2, type: 'info', message: 'CRK-SFT-001 ÏõêÍ∞Ä 10% ÏÉÅÏäπ', time: '30Î∂Ñ Ï†Ñ', active: true },
      { id: 3, type: 'error', message: 'VALVE-ASM-001 Ïû¨Í≥† Î∂ÄÏ°±', time: '1ÏãúÍ∞Ñ Ï†Ñ', active: false },
      { id: 4, type: 'success', message: 'PISTON-001 Í≤ÄÏ¶ù ÏôÑÎ£å', time: '2ÏãúÍ∞Ñ Ï†Ñ', active: false }
    ];
    setAlarms(initialAlarms);

    // eBOM Î≥ÄÍ≤ΩÏÇ¨Ìï≠
    const ebomChangeList = [
      { id: 1, partNumber: 'ENG-BLOCK-SYS-001', field: 'leadtime', oldValue: '12', newValue: '15', type: 'modified' },
      { id: 2, partNumber: 'CRK-SFT-001', field: 'cost', oldValue: '2500000', newValue: '2800000', type: 'modified' },
      { id: 3, partNumber: 'NEW-COMP-001', field: 'all', oldValue: null, newValue: 'Ïã†Í∑ú Î∂ÄÌíà', type: 'added' }
    ];
    setEbomChanges(ebomChangeList);

    // ÏûêÎèô ÏïåÎûå ÏÉùÏÑ± ÌÉÄÏù¥Î®∏
    const interval = setInterval(() => {
      simulateNewAlarm();
    }, 30000); // 30Ï¥àÎßàÎã§ ÏÉà ÏïåÎûå

    return () => clearInterval(interval);
  }, []);

  // ÏÉà ÏïåÎûå ÏãúÎÆ¨Î†àÏù¥ÏÖò
  const simulateNewAlarm = () => {
    const alarmTemplates = [
      { type: 'warning', message: 'Ïû¨Í≥† ÏàòÏ§Ä Í≤ΩÍ≥†' },
      { type: 'info', message: 'Ïã†Í∑ú ÏÑ§Í≥Ñ Î≥ÄÍ≤Ω Í∞êÏßÄ' },
      { type: 'error', message: 'ÌíàÏßà Í∏∞Ï§Ä ÎØ∏Îã¨' },
      { type: 'success', message: 'Í≤ÄÏ¶ù ÌîÑÎ°úÏÑ∏Ïä§ ÏôÑÎ£å' }
    ];

    const template = alarmTemplates[Math.floor(Math.random() * alarmTemplates.length)];
    const newAlarm = {
      id: Date.now(),
      type: template.type,
      message: `${template.message} - ${bomData[Math.floor(Math.random() * bomData.length)]?.partNumber || 'ITEM-001'}`,
      time: 'Î∞©Í∏à',
      active: true
    };

    setAlarms(prev => [newAlarm, ...prev].slice(0, 10)); // ÏµúÎåÄ 10Í∞ú Ïú†ÏßÄ
    showInfo(`ÏÉà ÏïåÎûå: ${newAlarm.message}`);
  };

  // ÏïåÎûå ÌôïÏù∏
  const acknowledgeAlarm = (alarmId) => {
    setAlarms(prev => prev.map(alarm =>
      alarm.id === alarmId ? { ...alarm, active: false } : alarm
    ));
    showSuccess('ÏïåÎûåÏù¥ ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§');
  };

  // ÏïåÎûå ÏÇ≠Ï†ú
  const deleteAlarm = (alarmId) => {
    setAlarms(prev => prev.filter(alarm => alarm.id !== alarmId));
    showInfo('ÏïåÎûåÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§');
  };

  // Toggle tree item expansion
  const toggleExpand = (itemId) => {
    const newExpanded = new Set(expandedItems);
    if (newExpanded.has(itemId)) {
      newExpanded.delete(itemId);
    } else {
      newExpanded.add(itemId);
    }
    setExpandedItems(newExpanded);
  };

  // Filter items based on search and status
  const filterItems = (items) => {
    return items.filter(item => {
      const matchesSearch = !searchTerm ||
        item.partNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description?.toLowerCase().includes(searchTerm.toLowerCase());

      const matchesStatus = filterStatus === 'all' || item.status === filterStatus;

      return matchesSearch && matchesStatus;
    });
  };

  // Render tree items recursively
  const renderTreeItems = (items, level = 0) => {
    const filteredItems = filterItems(items);

    return filteredItems.map(item => {
      const isExpanded = expandedItems.has(item.id);
      const hasChildren = item.children && item.children.length > 0;
      const isSelected = selectedTreeItem?.id === item.id;

      return (
        <div key={item.id}>
          <div
            className={`tree-item ${isSelected ? 'selected' : ''}`}
            style={{ paddingLeft: `${15 + level * 20}px` }}
            onClick={() => {
              setSelectedTreeItem(item);
              setSelectedItem(item);
            }}
          >
            <div className="tree-item-content">
              {hasChildren && (
                <span
                  className="tree-expand"
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleExpand(item.id);
                  }}
                >
                  {isExpanded ? '‚ñº' : '‚ñ∂'}
                </span>
              )}
              {!hasChildren && <span className="tree-expand"></span>}
              <span className="tree-icon">{item.icon || (level === 0 ? 'üì¶' : level === 1 ? 'üîß' : '‚öôÔ∏è')}</span>
              <span className="tree-label">{item.partNumber}</span>
              <span className="tree-badge" style={{ background: '#007acc' }}>L{item.level}</span>
              {item.changed && <span className="tree-badge" style={{ background: '#e74c3c' }}>M</span>}
            </div>
          </div>
          {hasChildren && isExpanded && (
            <div>{renderTreeItems(item.children, level + 1)}</div>
          )}
        </div>
      );
    });
  };

  // Apply eBOM changes
  const applyEBOMChanges = () => {
    setShowModal(false);
    setShowNotificationBanner(false);

    // Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÅÏö©
    ebomChanges.forEach(change => {
      const newChange = {
        id: Date.now() + Math.random(),
        date: new Date().toLocaleDateString(),
        time: new Date().toLocaleTimeString(),
        user: user?.name || 'Admin',
        partNumber: change.partNumber,
        field: change.field,
        oldValue: change.oldValue,
        newValue: change.newValue,
        reason: 'eBOM ÎèôÍ∏∞Ìôî',
        status: 'pending'
      };
      setChangeHistory(prev => [...prev, newChange]);
    });

    showSuccess(`${ebomChanges.length}Í∞ú eBOM Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§`);
  };

  // ÏùºÍ¥Ñ ÏûëÏóÖ Í∏∞Îä•Îì§
  const handleBulkApprove = () => {
    const pendingItems = changeHistory.filter(item => item.status === 'pending');
    if (pendingItems.length === 0) {
      showWarning('ÏäπÏù∏Ìï† ÎåÄÍ∏∞ Ï§ëÏù∏ Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§');
      return;
    }

    setChangeHistory(prev => prev.map(item =>
      item.status === 'pending' ? { ...item, status: 'approved' } : item
    ));
    showSuccess(`${pendingItems.length}Í∞ú Ìï≠Î™©Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§`);
  };

  const handleExportExcel = () => {
    showInfo('Excel ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ï§ÄÎπÑ Ï§ë...');
    setTimeout(() => {
      const filename = `MBOM_Export_${new Date().toISOString().split('T')[0]}.xlsx`;
      showSuccess(`ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§: ${filename}`);
    }, 2000);
  };

  const handleImportData = () => {
    showInfo('Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÎåÄÌôîÏÉÅÏûê Ïó¥Í∏∞...');
  };

  const handleSave = async () => {
    const result = await saveBOMData();
    if (result.success) {
      showSuccess('BOM Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§');
      setChangeHistory([]);
    } else {
      showError('Ï†ÄÏû• Ïã§Ìå®');
    }
  };

  // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.ctrlKey) {
        switch(e.key) {
          case 's':
            e.preventDefault();
            handleSave();
            break;
          case 'e':
            e.preventDefault();
            handleExportExcel();
            break;
          case 'f':
            e.preventDefault();
            document.querySelector('.vscode-input')?.focus();
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  // ÏûêÎèô Ï†ÄÏû•
  useEffect(() => {
    const autoSaveInterval = setInterval(() => {
      if (changeHistory.length > 0) {
        console.log('ÏûêÎèô Ï†ÄÏû• Ïã§Ìñâ...');
        showInfo('ÏûêÎèô Ï†ÄÏû• Ï§ë...');
      }
    }, 60000); // 1Î∂ÑÎßàÎã§

    return () => clearInterval(autoSaveInterval);
  }, [changeHistory]);

  // Debug logging
  useEffect(() => {
    console.log('CompleteMBOMDashboard - bomData:', bomData);
    console.log('CompleteMBOMDashboard - loading:', loading);
  }, [bomData, loading]);

  return (
    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      {/* Unified Notification Manager */}
      <UnifiedNotificationManager />
      {/* Notification Banner */}
      {showNotificationBanner && (
        <div className="notification-banner show" style={{
          background: 'linear-gradient(90deg, #e74c3c, #c0392b)',
          color: 'white',
          padding: '10px 20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div className="notification-content">
            <span className="notification-icon">üîî</span>
            <span><strong>eBOM Î≥ÄÍ≤Ω Í∞êÏßÄ:</strong> {ebomChanges.length}Í∞ú Ìï≠Î™©Ïù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.</span>
          </div>
          <div style={{ display: 'flex', gap: '10px' }}>
            <button className="vscode-button" onClick={() => setShowModal(true)}>
              Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Î≥¥Í∏∞
            </button>
            <button className="vscode-button secondary" onClick={() => setShowNotificationBanner(false)}>
              ÎÇòÏ§ëÏóê
            </button>
          </div>
        </div>
      )}

      {/* VS Code Title Bar */}
      <div className="vscode-titlebar">
        <div className="vscode-title">M-BOM Management System - Enterprise Edition</div>
        <div className="window-controls">
          <span className="control-btn minimize"></span>
          <span className="control-btn maximize"></span>
          <span className="control-btn close" onClick={logout}></span>
        </div>
      </div>

      {/* VS Code Menu Bar */}
      <div className="vscode-menubar">
        <div className="menu-item">ÌååÏùº</div>
        <div className="menu-item">Ìé∏Ïßë</div>
        <div className="menu-item">Î≥¥Í∏∞</div>
        <div className="menu-item active" onClick={() => setShowChanges(!showChanges)}>
          Î≥ÄÍ≤ΩÏÇ¨Ìï≠ {changeHistory.length > 0 && `(${changeHistory.length})`}
        </div>
        <div className="menu-item" onClick={() => setShowAlarmDashboard(!showAlarmDashboard)}>
          ÏïåÎûå {alarms.filter(a => a.active).length > 0 && `(${alarms.filter(a => a.active).length})`}
        </div>
        <div className="menu-item" onClick={handleExportExcel}>ÎÇ¥Î≥¥ÎÇ¥Í∏∞</div>
        <div className="menu-item" onClick={handleImportData}>Í∞ÄÏ†∏Ïò§Í∏∞</div>
        <div className="menu-item">ÎèÑÍµ¨</div>
        <div className="menu-item">ÎèÑÏõÄÎßê</div>
      </div>

      {/* Alarm Dashboard */}
      {showAlarmDashboard && (
        <div className="changes-dashboard show" style={{ background: '#2d2d30', padding: '15px' }}>
          <div className="dashboard-header">
            <div className="dashboard-title">
              üö® ÏïåÎûå ÏÑºÌÑ∞: {alarms.filter(a => a.active).length}Í∞ú ÌôúÏÑ± ÏïåÎûå
            </div>
            <div className="dashboard-actions">
              <button className="vscode-button" onClick={() => setAlarms(prev => prev.map(a => ({ ...a, active: false })))}>
                Î™®Îëê ÌôïÏù∏
              </button>
              <button className="vscode-button secondary" onClick={() => setAlarms([])}>
                Î™®Îëê ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
          <div className="alarms-list" style={{ marginTop: '15px', maxHeight: '200px', overflow: 'auto' }}>
            {alarms.map(alarm => (
              <div key={alarm.id} className={`alarm-item ${alarm.type}`} style={{
                padding: '10px',
                marginBottom: '8px',
                background: alarm.active ? '#3c3c3c' : '#252526',
                borderLeft: `4px solid ${
                  alarm.type === 'error' ? '#e74c3c' :
                  alarm.type === 'warning' ? '#f39c12' :
                  alarm.type === 'success' ? '#27ae60' : '#3498db'
                }`,
                borderRadius: '4px',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  <span>{
                    alarm.type === 'error' ? '‚ùå' :
                    alarm.type === 'warning' ? '‚ö†Ô∏è' :
                    alarm.type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'
                  }</span>
                  <span style={{ color: alarm.active ? '#ffffff' : '#969696' }}>{alarm.message}</span>
                  <span style={{ fontSize: '11px', color: '#969696' }}>{alarm.time}</span>
                </div>
                <div style={{ display: 'flex', gap: '5px' }}>
                  {alarm.active && (
                    <button
                      className="vscode-button"
                      style={{ padding: '2px 8px', fontSize: '11px' }}
                      onClick={() => acknowledgeAlarm(alarm.id)}
                    >
                      ÌôïÏù∏
                    </button>
                  )}
                  <button
                    className="vscode-button secondary"
                    style={{ padding: '2px 8px', fontSize: '11px' }}
                    onClick={() => deleteAlarm(alarm.id)}
                  >
                    ÏÇ≠Ï†ú
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Changes Dashboard */}
      {showChanges && (
        <div className="changes-dashboard show" style={{ background: '#2d2d30', padding: '15px' }}>
          <div className="dashboard-header">
            <div className="dashboard-title">
              ‚ö†Ô∏è ÎØ∏Ï†ÄÏû• Î≥ÄÍ≤ΩÏÇ¨Ìï≠: {changeHistory.length}Í∞ú Ìï≠Î™©
            </div>
            <div className="dashboard-actions">
              <button className="vscode-button" onClick={handleSave}>Î™®Îëê Ï†ÄÏû•</button>
              <button className="vscode-button" onClick={handleBulkApprove}>ÏùºÍ¥Ñ ÏäπÏù∏</button>
              <button className="vscode-button secondary" onClick={() => setChangeHistory([])}>
                Î≥ÄÍ≤Ω Ï∑®ÏÜå
              </button>
            </div>
          </div>
          <div className="changes-list" style={{ marginTop: '10px', maxHeight: '150px', overflow: 'auto' }}>
            {changeHistory.map(change => (
              <div key={change.id} className="change-item" style={{
                padding: '8px',
                marginBottom: '5px',
                background: '#1e1e1e',
                borderRadius: '3px',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  <input type="checkbox" defaultChecked />
                  <span className="change-icon">‚úèÔ∏è</span>
                  <span className="change-part" style={{ color: '#9cdcfe' }}>{change.partNumber}</span>
                  <span className="change-details" style={{ color: '#969696' }}>
                    {change.field}: {change.oldValue} ‚Üí {change.newValue}
                  </span>
                </div>
                <span style={{
                  background: change.status === 'approved' ? '#27ae60' : '#f39c12',
                  color: 'white',
                  padding: '2px 6px',
                  borderRadius: '10px',
                  fontSize: '11px'
                }}>
                  {change.status === 'approved' ? 'ÏäπÏù∏' : 'ÎåÄÍ∏∞'}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Main Layout */}
      <div className="vscode-layout" style={{ flex: 1, display: 'flex', overflow: 'hidden' }}>
        {/* Sidebar - Tree View */}
        <div className="vscode-sidebar">
          <div className="vscode-sidebar-header">
            <div className="sidebar-title">
              üìÅ BOM EXPLORER
              <span className="level-indicator">{bomData.length}</span>
            </div>
          </div>

          {/* Search and Filter */}
          <div style={{ padding: '10px', borderBottom: '1px solid #3e3e42' }}>
            <input
              type="text"
              className="vscode-input"
              placeholder="üîç Í≤ÄÏÉâ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{ width: '100%', marginBottom: '5px' }}
            />
            <select
              className="vscode-input"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              style={{ width: '100%' }}
            >
              <option value="all">Î™®Îì† ÏÉÅÌÉú</option>
              <option value="approved">‚úÖ ÏäπÏù∏</option>
              <option value="review">üîç Í≤ÄÌÜ†Ï§ë</option>
              <option value="draft">üìù ÏûëÏÑ±Ï§ë</option>
              <option value="rejected">‚ùå Î∞òÎ†§</option>
            </select>
          </div>

          <div className="tree-container">
            {loading ? (
              <div style={{ padding: '20px', color: '#969696' }}>Î°úÎî©Ï§ë...</div>
            ) : (
              renderTreeItems(bomData)
            )}
          </div>
        </div>

        {/* Main Content Area */}
        <div className="vscode-content" style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
          {/* Tabs */}
          <div className="vscode-tabs">
            <div
              className={`tab-item ${activeTab === 'structure' ? 'active' : ''}`}
              onClick={() => setActiveTab('structure')}
            >
              üìä BOM Structure
            </div>
            <div
              className={`tab-item ${activeTab === 'changes' ? 'active' : ''}`}
              onClick={() => setActiveTab('changes')}
            >
              üìù Changes ({changeHistory.length})
            </div>
            <div
              className={`tab-item ${activeTab === 'analysis' ? 'active' : ''}`}
              onClick={() => setActiveTab('analysis')}
            >
              üìà Analysis
            </div>
            <div
              className={`tab-item ${activeTab === 'comparison' ? 'active' : ''}`}
              onClick={() => setActiveTab('comparison')}
            >
              üîç E-BOM vs M-BOM
            </div>
            <div
              className={`tab-item ${activeTab === 'settings' ? 'active' : ''}`}
              onClick={() => setActiveTab('settings')}
            >
              ‚öôÔ∏è Settings
            </div>
          </div>

          {/* Tab Content */}
          <div style={{ flex: 1, overflow: 'hidden', padding: '10px' }}>
            {activeTab === 'structure' && (
              <div style={{ height: '100%', width: '100%', display: 'flex' }}>
                {/* BOM Table Grid */}
                <div style={{ flex: 1, marginRight: '10px' }}>
                  <UnifiedBOMGrid
                    data={bomData}
                    onSelectionChanged={(selected) => {
                      if (selected.length > 0) {
                        setSelectedItem(selected[0]);
                      }
                    }}
                  />
                </div>
                {/* Right Sidebar */}
                <RightSidebar />
              </div>
            )}

            {activeTab === 'analysis' && (
              <div style={{ height: '100%', width: '100%', display: 'flex' }}>
                <div style={{ flex: 1, padding: '20px', overflow: 'auto' }}>
                  <div style={{ textAlign: 'center', color: '#8b8b8b', paddingTop: '50px' }}>
                    <h3>Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú</h3>
                    <p>Ïò§Î•∏Ï™Ω ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
                  </div>
                </div>
                <RightSidebar />
              </div>
            )}

            {activeTab === 'settings' && (
              <div style={{ height: '100%', width: '100%', display: 'flex' }}>
                <div style={{ flex: 1, padding: '20px', overflow: 'auto', color: '#cccccc' }}>
                  <h2>ÏãúÏä§ÌÖú ÏÑ§Ï†ï</h2>

                  <div style={{ marginTop: '20px' }}>
                    <h3>ÏïåÎ¶º ÏÑ§Ï†ï</h3>
                    <div style={{ background: '#252526', padding: '15px', borderRadius: '6px' }}>
                      <label style={{ display: 'block', marginBottom: '10px' }}>
                        <input type="checkbox" defaultChecked /> eBOM Î≥ÄÍ≤Ω ÏïåÎ¶º
                      </label>
                      <label style={{ display: 'block', marginBottom: '10px' }}>
                        <input type="checkbox" defaultChecked /> Î¶¨ÎìúÌÉÄÏûÑ Ï¥àÍ≥º ÏïåÎ¶º
                      </label>
                      <label style={{ display: 'block', marginBottom: '10px' }}>
                        <input type="checkbox" defaultChecked /> ÏõêÍ∞Ä Î≥ÄÎèô ÏïåÎ¶º
                      </label>
                      <label style={{ display: 'block' }}>
                        <input type="checkbox" /> ÏûêÎèô Ï†ÄÏû• ÌôúÏÑ±Ìôî
                      </label>
                    </div>
                  </div>

                  <div style={{ marginTop: '20px' }}>
                    <h3>ÎèôÍ∏∞Ìôî ÏÑ§Ï†ï</h3>
                    <div style={{ background: '#252526', padding: '15px', borderRadius: '6px' }}>
                      <div style={{ marginBottom: '10px' }}>
                        <label>ÎèôÍ∏∞Ìôî Í∞ÑÍ≤©</label>
                        <select className="vscode-input" style={{ marginLeft: '10px', width: '200px' }}>
                          <option>Ïã§ÏãúÍ∞Ñ</option>
                          <option>5Î∂Ñ</option>
                          <option>10Î∂Ñ</option>
                          <option>30Î∂Ñ</option>
                          <option>ÏàòÎèô</option>
                        </select>
                      </div>
                      <button className="vscode-button">ÏßÄÍ∏à ÎèôÍ∏∞Ìôî</button>
                    </div>
                  </div>

                  <div style={{ marginTop: '20px' }}>
                    <h3>ÌëúÏãú ÏÑ§Ï†ï</h3>
                    <div style={{ background: '#252526', padding: '15px', borderRadius: '6px' }}>
                      <label style={{ display: 'block', marginBottom: '10px' }}>
                        <input type="checkbox" defaultChecked /> Ìä∏Î¶¨ ÏûêÎèô ÌôïÏû•
                      </label>
                      <label style={{ display: 'block', marginBottom: '10px' }}>
                        <input type="checkbox" defaultChecked /> Î≥ÄÍ≤Ω Ìï≠Î™© Í∞ïÏ°∞
                      </label>
                      <label style={{ display: 'block' }}>
                        <input type="checkbox" defaultChecked /> Ìà¥ÌåÅ ÌëúÏãú
                      </label>
                    </div>
                  </div>
                </div>
                <RightSidebar />
              </div>
            )}
          </div>
        </div>

        {/* Right Panel - Properties */}
        {selectedItem && (
          <div className="vscode-panel">
            <div className="panel-header">
              ÏÜçÏÑ±: {selectedItem.partNumber}
            </div>
            <div className="panel-content">
              <div className="property-group">
                <div className="property-group-title">Í∏∞Î≥∏ Ï†ïÎ≥¥</div>
                <div className="property-item">
                  <span className="property-label">ÌíàÎ≤à:</span>
                  <span className="property-value">{selectedItem.partNumber}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">ÌíàÎ™Ö:</span>
                  <span className="property-value">{selectedItem.description}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">Î†àÎ≤®:</span>
                  <span className="property-value">Level {selectedItem.level}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">ÏàòÎüâ:</span>
                  <span className="property-value">{selectedItem.quantity} {selectedItem.unit}</span>
                </div>
              </div>

              <div className="property-group">
                <div className="property-group-title">ÏÉùÏÇ∞ Ï†ïÎ≥¥</div>
                <div className="property-item">
                  <span className="property-label">ÏûëÏóÖ:</span>
                  <span className="property-value">{selectedItem.operation || '-'}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">ÏûëÏóÖÏû•:</span>
                  <span className="property-value">{selectedItem.workcenter || '-'}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">Í≥µÍ∏âÏóÖÏ≤¥:</span>
                  <span className="property-value">{selectedItem.supplier || '-'}</span>
                </div>
                <div className="property-item">
                  <span className="property-label">Î¶¨ÎìúÌÉÄÏûÑ:</span>
                  <span className="property-value" style={{
                    color: (selectedItem.leadtime || 0) > 30 ? '#e74c3c' : '#cccccc',
                    fontWeight: (selectedItem.leadtime || 0) > 30 ? 'bold' : 'normal'
                  }}>
                    {selectedItem.leadtime || 0}Ïùº
                  </span>
                </div>
              </div>

              {/* Action Buttons */}
              <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>
                <button className="vscode-button" style={{ width: '100%' }}>
                  Ìé∏Ïßë
                </button>
                <button className="vscode-button secondary" style={{ width: '100%' }}>
                  Î≥µÏÇ¨
                </button>
                <button className="vscode-button secondary" style={{ width: '100%' }}>
                  Ïù¥Î†• Î≥¥Í∏∞
                </button>
                <button
                  className="vscode-button secondary"
                  style={{ width: '100%', background: '#e74c3c' }}
                  onClick={() => {
                    if (confirm(`${selectedItem.partNumber}Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
                      deleteBOMItem(selectedItem.id);
                      setSelectedItem(null);
                      showSuccess('Ìï≠Î™©Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§');
                    }
                  }}
                >
                  ÏÇ≠Ï†ú
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Status Bar */}
      <div className="vscode-statusbar">
        <div className="status-item">
          <span>üë§ {user?.name || 'User'}</span>
        </div>
        <div className="status-item">
          <span>üìä {bomData.length} items</span>
        </div>
        <div className="status-item">
          <span>üíæ {changeHistory.length} changes</span>
        </div>
        <div className="status-item">
          <span>üîî {alarms.filter(a => a.active).length} alarms</span>
        </div>
        <div className="status-item">
          <span>‚ö†Ô∏è eBOM: {ebomChanges.length} changes</span>
        </div>
        <div className="status-item">
          <span>üåê UTF-8</span>
        </div>
        <div className="status-item">
          <span>{new Date().toLocaleTimeString()}</span>
        </div>
      </div>

      {/* Modal for eBOM Changes */}
      {showModal && (
        <div className="modal-overlay show" style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div className="modal" style={{
            background: '#2d2d30',
            borderRadius: '8px',
            width: '600px',
            maxHeight: '80vh',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <div className="modal-header" style={{
              padding: '20px',
              borderBottom: '1px solid #3e3e42',
              display: 'flex',
              justifyContent: 'space-between'
            }}>
              <div className="modal-title" style={{ fontSize: '16px', fontWeight: '600', color: '#e74c3c' }}>
                eBOM Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÅÏö© ÌôïÏù∏
              </div>
              <div
                className="modal-close"
                onClick={() => setShowModal(false)}
                style={{ cursor: 'pointer', fontSize: '20px', color: '#cccccc' }}
              >
                √ó
              </div>
            </div>

            <div className="modal-body" style={{ padding: '20px', overflowY: 'auto', flex: 1 }}>
              <p style={{ marginBottom: '20px', color: '#cccccc' }}>
                Îã§Ïùå eBOM Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ M-BOMÏóê Ï†ÅÏö©ÌïòÏãúÍ≤†ÏäµÎãàÍπå?
              </p>

              <div style={{ background: '#1e1e1e', padding: '15px', borderRadius: '6px' }}>
                <h4 style={{ marginBottom: '15px', color: '#f39c12' }}>Î≥ÄÍ≤Ω Ìï≠Î™©</h4>
                {ebomChanges.map((change, index) => (
                  <label key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
                    <input type="checkbox" defaultChecked style={{ marginRight: '10px' }} />
                    <span style={{ color: '#9cdcfe' }}>{change.partNumber}</span>
                    <span style={{ marginLeft: 'auto', color: '#969696', fontSize: '12px' }}>
                      {change.field}: {change.oldValue} ‚Üí {change.newValue}
                    </span>
                  </label>
                ))}
              </div>

              <div style={{
                marginTop: '20px',
                padding: '10px',
                background: '#3c3c3c',
                borderRadius: '4px',
                fontSize: '12px',
                color: '#f39c12'
              }}>
                ‚ö†Ô∏è Ï£ºÏùò: Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§. Ï†ÅÏö© Ï†Ñ Î∞±ÏóÖÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.
              </div>
            </div>

            <div className="modal-footer" style={{
              padding: '20px',
              borderTop: '1px solid #3e3e42',
              display: 'flex',
              justifyContent: 'flex-end',
              gap: '10px'
            }}>
              <button className="vscode-button secondary" onClick={() => setShowModal(false)}>
                Ï∑®ÏÜå
              </button>
              <button className="vscode-button" onClick={applyEBOMChanges}>
                Ï†ÅÏö©
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompleteMBOMDashboard;